{"version":3,"file":"yberion-ngx-treeview.mjs","sources":["../../../projects/ngx-treeview/src/lib/directives/dropdown.directive.ts","../../../projects/ngx-treeview/src/lib/directives/dropdown-menu.directive.ts","../../../projects/ngx-treeview/src/lib/directives/dropdown-toggle.directive.ts","../../../projects/ngx-treeview/src/lib/helpers/treeview-helper.ts","../../../projects/ngx-treeview/src/lib/models/treeview-item.ts","../../../projects/ngx-treeview/src/lib/models/treeview-i18n.ts","../../../projects/ngx-treeview/src/lib/models/treeview-config.ts","../../../projects/ngx-treeview/src/lib/helpers/treeview-event-parser.ts","../../../projects/ngx-treeview/src/lib/components/treeview-item/treeview-item.component.ts","../../../projects/ngx-treeview/src/lib/components/treeview-item/treeview-item.component.html","../../../projects/ngx-treeview/src/lib/components/treeview/treeview.component.ts","../../../projects/ngx-treeview/src/lib/components/treeview/treeview.component.html","../../../projects/ngx-treeview/src/lib/components/dropdown-treeview/dropdown-treeview.component.ts","../../../projects/ngx-treeview/src/lib/components/dropdown-treeview/dropdown-treeview.component.html","../../../projects/ngx-treeview/src/lib/pipes/treeview.pipe.ts","../../../projects/ngx-treeview/src/lib/treeview.module.ts","../../../projects/ngx-treeview/src/public-api.ts","../../../projects/ngx-treeview/src/yberion-ngx-treeview.ts"],"sourcesContent":["import { Directive, Input, Output, HostBinding, HostListener, EventEmitter } from '@angular/core';\r\nimport { isNil } from 'lodash';\r\n\r\n@Directive({\r\n  selector: '[ngxDropdown]',\r\n  exportAs: 'ngxDropdown'\r\n})\r\nexport class DropdownDirective {\r\n  toggleElement: any;\r\n  @Input('open') internalOpen = false;\r\n  @Output() openChange = new EventEmitter<boolean>();\r\n\r\n  @HostBinding('class.show') get isOpen(): boolean {\r\n    return this.internalOpen;\r\n  }\r\n\r\n  @HostListener('keyup.esc')\r\n  onKeyupEsc(): void {\r\n    this.close();\r\n  }\r\n\r\n  @HostListener('document:click', ['$event'])\r\n  onDocumentClick(event: MouseEvent): void {\r\n    if (event.button !== 2 && !this.isEventFromToggle(event)) {\r\n      this.close();\r\n    }\r\n  }\r\n\r\n  open(): void {\r\n    if (!this.internalOpen) {\r\n      this.internalOpen = true;\r\n      this.openChange.emit(true);\r\n    }\r\n  }\r\n\r\n  close(): void {\r\n    if (this.internalOpen) {\r\n      this.internalOpen = false;\r\n      this.openChange.emit(false);\r\n    }\r\n  }\r\n\r\n  toggle(): void {\r\n    if (this.isOpen) {\r\n      this.close();\r\n    } else {\r\n      this.open();\r\n    }\r\n  }\r\n\r\n  private isEventFromToggle(event: MouseEvent): boolean {\r\n    return !isNil(this.toggleElement) && this.toggleElement.contains(event.target);\r\n  }\r\n}\r\n","import { Directive, HostBinding } from '@angular/core';\r\nimport { DropdownDirective } from './dropdown.directive';\r\n\r\n@Directive({\r\n  selector: '[ngxDropdownMenu]',\r\n  host: {\r\n    '[class.dropdown-menu]': 'true',\r\n    '[class.show]': 'dropdown.isOpen'\r\n  }\r\n})\r\nexport class DropdownMenuDirective {\r\n  constructor(\r\n    public dropdown: DropdownDirective\r\n  ) { }\r\n}\r\n","import { Directive, ElementRef } from '@angular/core';\r\nimport { DropdownDirective } from './dropdown.directive';\r\n\r\n@Directive({\r\n  selector: '[ngxDropdownToggle]',\r\n  host: {\r\n    class: 'dropdown-toggle',\r\n    'aria-haspopup': 'true',\r\n    '[attr.aria-expanded]': 'dropdown.isOpen',\r\n    '(click)': 'dropdown.toggle()'\r\n  }\r\n})\r\nexport class DropdownToggleDirective {\r\n  constructor(\r\n    public dropdown: DropdownDirective,\r\n    elementRef: ElementRef\r\n  ) {\r\n    dropdown.toggleElement = elementRef.nativeElement;\r\n  }\r\n}\r\n","import { concat, isNil, pull } from 'lodash';\r\nimport { TreeviewItem } from '../models/treeview-item';\r\n\r\nexport const TreeviewHelper = {\r\n  findItem,\r\n  findItemInList,\r\n  findParent,\r\n  removeItem,\r\n  concatSelection\r\n};\r\n\r\nfunction findItem(root: TreeviewItem, value: any): TreeviewItem {\r\n  if (isNil(root)) {\r\n    return undefined;\r\n  }\r\n\r\n  if (root.value === value) {\r\n    return root;\r\n  }\r\n\r\n  if (root.children) {\r\n    for (const child of root.children) {\r\n      const foundItem = findItem(child, value);\r\n      if (foundItem) {\r\n        return foundItem;\r\n      }\r\n    }\r\n  }\r\n\r\n  return undefined;\r\n}\r\n\r\nfunction findItemInList(list: TreeviewItem[], value: any): TreeviewItem {\r\n  if (isNil(list)) {\r\n    return undefined;\r\n  }\r\n\r\n  for (const item of list) {\r\n    const foundItem = findItem(item, value);\r\n    if (foundItem) {\r\n      return foundItem;\r\n    }\r\n  }\r\n\r\n  return undefined;\r\n}\r\n\r\nfunction findParent(root: TreeviewItem, item: TreeviewItem): TreeviewItem {\r\n  if (isNil(root) || isNil(root.children)) {\r\n    return undefined;\r\n  }\r\n\r\n  for (const child of root.children) {\r\n    if (child === item) {\r\n      return root;\r\n    } else {\r\n      const parent = findParent(child, item);\r\n      if (parent) {\r\n        return parent;\r\n      }\r\n    }\r\n  }\r\n\r\n  return undefined;\r\n}\r\n\r\nfunction removeItem(root: TreeviewItem, item: TreeviewItem): boolean {\r\n  const parent = findParent(root, item);\r\n  if (parent) {\r\n    pull(parent.children, item);\r\n    if (parent.children.length === 0) {\r\n      parent.children = undefined;\r\n    } else {\r\n      parent.correctChecked();\r\n    }\r\n    return true;\r\n  }\r\n\r\n  return false;\r\n}\r\n\r\nfunction concatSelection(items: TreeviewItem[], checked: TreeviewItem[], unchecked: TreeviewItem[]): { [k: string]: TreeviewItem[] } {\r\n  let checkedItems = [...checked];\r\n  let uncheckedItems = [...unchecked];\r\n  for (const item of items) {\r\n    const selection = item.getSelection();\r\n    checkedItems = concat(checkedItems, selection.checkedItems);\r\n    uncheckedItems = concat(uncheckedItems, selection.uncheckedItems);\r\n  }\r\n  return {\r\n    checked: checkedItems,\r\n    unchecked: uncheckedItems\r\n  };\r\n}\r\n","import { isBoolean, isNil, isString } from 'lodash';\r\nimport { TreeviewHelper } from '../helpers/treeview-helper';\r\n\r\nexport interface TreeviewSelection {\r\n  checkedItems: TreeviewItem[];\r\n  uncheckedItems: TreeviewItem[];\r\n}\r\n\r\nexport interface TreeItem {\r\n  text: string;\r\n  value: any;\r\n  disabled?: boolean;\r\n  checked?: boolean;\r\n  collapsed?: boolean;\r\n  children?: TreeItem[];\r\n}\r\n\r\nexport class TreeviewItem {\r\n  private internalDisabled = false;\r\n  private internalChecked = true;\r\n  private internalCollapsed = false;\r\n  private internalChildren: TreeviewItem[];\r\n  text: string;\r\n  value: any;\r\n\r\n  constructor(item: TreeItem, autoCorrectChecked = false) {\r\n    if (isNil(item)) {\r\n      throw new Error('Item must be defined');\r\n    }\r\n    if (isString(item.text)) {\r\n      this.text = item.text;\r\n    } else {\r\n      throw new Error('A text of item must be string object');\r\n    }\r\n    this.value = item.value;\r\n    if (isBoolean(item.checked)) {\r\n      this.checked = item.checked;\r\n    }\r\n    if (isBoolean(item.collapsed)) {\r\n      this.collapsed = item.collapsed;\r\n    }\r\n    if (isBoolean(item.disabled)) {\r\n      this.disabled = item.disabled;\r\n    }\r\n    if (!isNil(item.children) && item.children.length > 0) {\r\n      this.children = item.children.map(child => {\r\n        if (this.disabled === true) {\r\n          child.disabled = true;\r\n        }\r\n\r\n        return new TreeviewItem(child);\r\n      });\r\n    }\r\n\r\n    if (autoCorrectChecked) {\r\n      this.correctChecked();\r\n    }\r\n  }\r\n\r\n  get checked(): boolean {\r\n    return this.internalChecked;\r\n  }\r\n\r\n  set checked(value: boolean) {\r\n    if (!this.internalDisabled) {\r\n      if (this.internalChecked !== value) {\r\n        this.internalChecked = value;\r\n      }\r\n    }\r\n  }\r\n\r\n  get indeterminate(): boolean {\r\n    return this.checked === undefined;\r\n  }\r\n\r\n  setCheckedRecursive(value: boolean): void {\r\n    if (!this.internalDisabled) {\r\n      this.internalChecked = value;\r\n      if (!isNil(this.internalChildren)) {\r\n        this.internalChildren.forEach(child => child.setCheckedRecursive(value));\r\n      }\r\n    }\r\n  }\r\n\r\n  get disabled(): boolean {\r\n    return this.internalDisabled;\r\n  }\r\n\r\n  set disabled(value: boolean) {\r\n    if (this.internalDisabled !== value) {\r\n      this.internalDisabled = value;\r\n      if (!isNil(this.internalChildren)) {\r\n        this.internalChildren.forEach(child => child.disabled = value);\r\n      }\r\n    }\r\n  }\r\n\r\n  get collapsed(): boolean {\r\n    return this.internalCollapsed;\r\n  }\r\n\r\n  set collapsed(value: boolean) {\r\n    if (this.internalCollapsed !== value) {\r\n      this.internalCollapsed = value;\r\n    }\r\n  }\r\n\r\n  setCollapsedRecursive(value: boolean): void {\r\n    this.internalCollapsed = value;\r\n    if (!isNil(this.internalChildren)) {\r\n      this.internalChildren.forEach(child => child.setCollapsedRecursive(value));\r\n    }\r\n  }\r\n\r\n  get children(): TreeviewItem[] {\r\n    return this.internalChildren;\r\n  }\r\n\r\n  set children(value: TreeviewItem[]) {\r\n    if (this.internalChildren !== value) {\r\n      if (!isNil(value) && value.length === 0) {\r\n        throw new Error('Children must be not an empty array');\r\n      }\r\n      this.internalChildren = value;\r\n      if (!isNil(this.internalChildren)) {\r\n        let checked = null;\r\n        this.internalChildren.forEach(child => {\r\n          if (checked === null) {\r\n            checked = child.checked;\r\n          } else {\r\n            if (child.checked !== checked) {\r\n              checked = undefined;\r\n              return;\r\n            }\r\n          }\r\n        });\r\n        this.internalChecked = checked;\r\n      }\r\n    }\r\n  }\r\n\r\n  getSelection(): TreeviewSelection {\r\n    let checkedItems: TreeviewItem[] = [];\r\n    let uncheckedItems: TreeviewItem[] = [];\r\n    if (isNil(this.internalChildren)) {\r\n      if (this.internalChecked) {\r\n        checkedItems.push(this);\r\n      } else {\r\n        uncheckedItems.push(this);\r\n      }\r\n    } else {\r\n      const selection = TreeviewHelper.concatSelection(this.internalChildren, checkedItems, uncheckedItems);\r\n      checkedItems = selection.checked;\r\n      uncheckedItems = selection.unchecked;\r\n    }\r\n\r\n    return {\r\n      checkedItems,\r\n      uncheckedItems\r\n    };\r\n  }\r\n\r\n  correctChecked(): void {\r\n    this.internalChecked = this.getCorrectChecked();\r\n  }\r\n\r\n  private getCorrectChecked(): boolean {\r\n    let checked: boolean = null;\r\n    if (!isNil(this.internalChildren)) {\r\n      for (const child of this.internalChildren) {\r\n        child.internalChecked = child.getCorrectChecked();\r\n        if (checked === null) {\r\n          checked = child.internalChecked;\r\n        } else if (checked !== child.internalChecked) {\r\n          checked = undefined;\r\n          break;\r\n        }\r\n      }\r\n    } else {\r\n      checked = this.checked;\r\n    }\r\n\r\n    return checked;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { TreeviewSelection } from './treeview-item';\r\n\r\n@Injectable()\r\nexport abstract class TreeviewI18n {\r\n  abstract getText(selection: TreeviewSelection): string;\r\n  abstract getAllCheckboxText(): string;\r\n  abstract getFilterPlaceholder(): string;\r\n  abstract getFilterNoItemsFoundText(): string;\r\n  abstract getTooltipCollapseExpandText(isCollapse: boolean): string;\r\n}\r\n\r\n@Injectable()\r\nexport class DefaultTreeviewI18n extends TreeviewI18n {\r\n  getText(selection: TreeviewSelection): string {\r\n    if (selection.uncheckedItems.length === 0) {\r\n      if (selection.checkedItems.length > 0) {\r\n        return this.getAllCheckboxText();\r\n      } else {\r\n        return '';\r\n      }\r\n    }\r\n\r\n    switch (selection.checkedItems.length) {\r\n      case 0:\r\n        return 'Select options';\r\n      case 1:\r\n        return selection.checkedItems[0].text;\r\n      default:\r\n        return `${selection.checkedItems.length} options selected`;\r\n    }\r\n  }\r\n\r\n  getAllCheckboxText(): string {\r\n    return 'All';\r\n  }\r\n\r\n  getFilterPlaceholder(): string {\r\n    return 'Filter';\r\n  }\r\n\r\n  getFilterNoItemsFoundText(): string {\r\n    return 'No items found';\r\n  }\r\n\r\n  getTooltipCollapseExpandText(isCollapse: boolean): string {\r\n    return isCollapse ? 'Expand' : 'Collapse';\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\n@Injectable()\r\nexport class TreeviewConfig {\r\n  hasAllCheckBox = true;\r\n  hasFilter = false;\r\n  hasCollapseExpand = false;\r\n  decoupleChildFromParent = false;\r\n  maxHeight = 500;\r\n\r\n  get hasDivider(): boolean {\r\n    return this.hasFilter || this.hasAllCheckBox || this.hasCollapseExpand;\r\n  }\r\n\r\n  public static create(fields?: {\r\n    hasAllCheckBox?: boolean,\r\n    hasFilter?: boolean,\r\n    hasCollapseExpand?: boolean,\r\n    decoupleChildFromParent?: boolean\r\n    maxHeight?: number,\r\n  }): TreeviewConfig {\r\n    const config = new TreeviewConfig();\r\n    Object.assign(config, fields);\r\n    return config;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { isNil } from 'lodash';\r\nimport { TreeviewItem } from '../models/treeview-item';\r\nimport { TreeviewComponent } from '../components/treeview/treeview.component';\r\n\r\n@Injectable()\r\nexport abstract class TreeviewEventParser {\r\n  abstract getSelectedChange(component: TreeviewComponent): any[];\r\n}\r\n\r\n@Injectable()\r\nexport class DefaultTreeviewEventParser extends TreeviewEventParser {\r\n  getSelectedChange(component: TreeviewComponent): any[] {\r\n    const checkedItems = component.selection.checkedItems;\r\n    if (!isNil(checkedItems)) {\r\n      return checkedItems.map(item => item.value);\r\n    }\r\n\r\n    return [];\r\n  }\r\n}\r\n\r\nexport interface DownlineTreeviewItem {\r\n  item: TreeviewItem;\r\n  parent: DownlineTreeviewItem;\r\n}\r\n\r\n@Injectable()\r\nexport class DownlineTreeviewEventParser extends TreeviewEventParser {\r\n  getSelectedChange(component: TreeviewComponent): any[] {\r\n    const items = component.items;\r\n    if (!isNil(items)) {\r\n      let result: DownlineTreeviewItem[] = [];\r\n      items.forEach(item => {\r\n        const links = this.getLinks(item, null);\r\n        if (!isNil(links)) {\r\n          result = result.concat(links);\r\n        }\r\n      });\r\n\r\n      return result;\r\n    }\r\n\r\n    return [];\r\n  }\r\n\r\n  private getLinks(item: TreeviewItem, parent: DownlineTreeviewItem): DownlineTreeviewItem[] {\r\n    if (!isNil(item.children)) {\r\n      const link = {\r\n        item,\r\n        parent\r\n      };\r\n      let result: DownlineTreeviewItem[] = [];\r\n      item.children.forEach(child => {\r\n        const links = this.getLinks(child, link);\r\n        if (!isNil(links)) {\r\n          result = result.concat(links);\r\n        }\r\n      });\r\n\r\n      return result;\r\n    }\r\n\r\n    if (item.checked) {\r\n      return [{\r\n        item,\r\n        parent\r\n      }];\r\n    }\r\n\r\n    return null;\r\n  }\r\n}\r\n\r\n@Injectable()\r\nexport class OrderDownlineTreeviewEventParser extends TreeviewEventParser {\r\n  private currentDownlines: DownlineTreeviewItem[] = [];\r\n  private parser = new DownlineTreeviewEventParser();\r\n\r\n  getSelectedChange(component: TreeviewComponent): any[] {\r\n    const newDownlines: DownlineTreeviewItem[] = this.parser.getSelectedChange(component);\r\n    if (this.currentDownlines.length === 0) {\r\n      this.currentDownlines = newDownlines;\r\n    } else {\r\n      const intersectDownlines: DownlineTreeviewItem[] = [];\r\n      this.currentDownlines.forEach(downline => {\r\n        let foundIndex = -1;\r\n        const length = newDownlines.length;\r\n        for (let i = 0; i < length; i++) {\r\n          if (downline.item.value === newDownlines[i].item.value) {\r\n            foundIndex = i;\r\n            break;\r\n          }\r\n        }\r\n\r\n        if (foundIndex !== -1) {\r\n          intersectDownlines.push(newDownlines[foundIndex]);\r\n          newDownlines.splice(foundIndex, 1);\r\n        }\r\n      });\r\n\r\n      this.currentDownlines = intersectDownlines.concat(newDownlines);\r\n    }\r\n\r\n    return this.currentDownlines;\r\n  }\r\n}\r\n","import { Component, EventEmitter, Input, Output, TemplateRef } from '@angular/core';\r\nimport { isNil } from 'lodash';\r\nimport { TreeviewItem } from '../../models/treeview-item';\r\nimport { TreeviewConfig } from '../../models/treeview-config';\r\nimport { TreeviewItemTemplateContext } from '../../models/treeview-item-template-context';\r\n\r\n@Component({\r\n  selector: 'ngx-treeview-item',\r\n  templateUrl: './treeview-item.component.html',\r\n  styleUrls: ['./treeview-item.component.scss']\r\n})\r\nexport class TreeviewItemComponent {\r\n  @Input() config: TreeviewConfig;\r\n  @Input() template: TemplateRef<TreeviewItemTemplateContext>;\r\n  @Input() item: TreeviewItem;\r\n  @Output() checkedChange = new EventEmitter<boolean>();\r\n\r\n  constructor(\r\n    private defaultConfig: TreeviewConfig\r\n  ) {\r\n    this.config = this.defaultConfig;\r\n  }\r\n\r\n  onCollapseExpand = () => {\r\n    this.item.collapsed = !this.item.collapsed;\r\n  }\r\n\r\n  onCheckedChange = () => {\r\n    const checked = this.item.checked;\r\n    if (!isNil(this.item.children) && !this.config.decoupleChildFromParent) {\r\n      this.item.children.forEach(child => child.setCheckedRecursive(checked));\r\n    }\r\n    this.checkedChange.emit(checked);\r\n  }\r\n\r\n  onChildCheckedChange(child: TreeviewItem, checked: boolean): void {\r\n    if (!this.config.decoupleChildFromParent) {\r\n      let itemChecked: boolean = null;\r\n      for (const childItem of this.item.children) {\r\n        if (itemChecked === null) {\r\n          itemChecked = childItem.checked;\r\n        } else if (itemChecked !== childItem.checked) {\r\n          itemChecked = undefined;\r\n          break;\r\n        }\r\n      }\r\n\r\n      if (itemChecked === null) {\r\n        itemChecked = false;\r\n      }\r\n\r\n      if (this.item.checked !== itemChecked) {\r\n        this.item.checked = itemChecked;\r\n      }\r\n\r\n    }\r\n\r\n    this.checkedChange.emit(checked);\r\n  }\r\n}\r\n","<div *ngIf=\"item\" class=\"treeview-item\">\r\n  <ng-template [ngTemplateOutlet]=\"template\"\r\n    [ngTemplateOutletContext]=\"{item: item, onCollapseExpand: onCollapseExpand, onCheckedChange: onCheckedChange}\">\r\n  </ng-template>\r\n  <div *ngIf=\"!item.collapsed\">\r\n    <ngx-treeview-item [config]=\"config\" *ngFor=\"let child of item.children\" [item]=\"child\" [template]=\"template\"\r\n      (checkedChange)=\"onChildCheckedChange(child, $event)\">\r\n    </ngx-treeview-item>\r\n  </div>\r\n</div>\r\n","import { Component, Input, Output, EventEmitter, SimpleChanges, OnChanges, TemplateRef, OnInit } from '@angular/core';\r\nimport { isNil, includes } from 'lodash';\r\nimport { TreeviewI18n } from '../../models/treeview-i18n';\r\nimport { TreeviewItem, TreeviewSelection } from '../../models/treeview-item';\r\nimport { TreeviewConfig } from '../../models/treeview-config';\r\nimport { TreeviewHeaderTemplateContext } from '../../models/treeview-header-template-context';\r\nimport { TreeviewItemTemplateContext } from '../../models/treeview-item-template-context';\r\nimport { TreeviewHelper } from '../../helpers/treeview-helper';\r\nimport { TreeviewEventParser } from '../../helpers/treeview-event-parser';\r\n\r\nclass FilterTreeviewItem extends TreeviewItem {\r\n  private readonly refItem: TreeviewItem;\r\n  constructor(item: TreeviewItem) {\r\n    super({\r\n      text: item.text,\r\n      value: item.value,\r\n      disabled: item.disabled,\r\n      checked: item.checked,\r\n      collapsed: item.collapsed,\r\n      children: item.children\r\n    });\r\n    this.refItem = item;\r\n  }\r\n\r\n  updateRefChecked(): void {\r\n    this.children.forEach(child => {\r\n      if (child instanceof FilterTreeviewItem) {\r\n        child.updateRefChecked();\r\n      }\r\n    });\r\n\r\n    let refChecked = this.checked;\r\n    if (refChecked) {\r\n      for (const refChild of this.refItem.children) {\r\n        if (!refChild.checked) {\r\n          refChecked = false;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    this.refItem.checked = refChecked;\r\n  }\r\n}\r\n\r\n@Component({\r\n  selector: 'ngx-treeview',\r\n  templateUrl: './treeview.component.html',\r\n  styleUrls: ['./treeview.component.scss']\r\n})\r\nexport class TreeviewComponent implements OnChanges, OnInit {\r\n  @Input() headerTemplate: TemplateRef<TreeviewHeaderTemplateContext>;\r\n  @Input() itemTemplate: TemplateRef<TreeviewItemTemplateContext>;\r\n  @Input() items: TreeviewItem[];\r\n  @Input() config: TreeviewConfig;\r\n  @Output() selectedChange = new EventEmitter<any[]>();\r\n  @Output() filterChange = new EventEmitter<string>();\r\n  headerTemplateContext: TreeviewHeaderTemplateContext;\r\n  allItem: TreeviewItem;\r\n  filterText = '';\r\n  filterItems: TreeviewItem[];\r\n  selection: TreeviewSelection;\r\n\r\n  constructor(\r\n    public i18n: TreeviewI18n,\r\n    private defaultConfig: TreeviewConfig,\r\n    private eventParser: TreeviewEventParser\r\n  ) {\r\n    this.config = this.defaultConfig;\r\n    this.allItem = new TreeviewItem({ text: 'All', value: undefined });\r\n  }\r\n\r\n  get hasFilterItems(): boolean {\r\n    return !isNil(this.filterItems) && this.filterItems.length > 0;\r\n  }\r\n\r\n  get maxHeight(): string {\r\n    return `${this.config.maxHeight}`;\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.createHeaderTemplateContext();\r\n    this.generateSelection();\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    const itemsSimpleChange = changes.items;\r\n    if (!isNil(itemsSimpleChange) && !isNil(this.items)) {\r\n      this.updateFilterItems();\r\n      this.updateCollapsedOfAll();\r\n      this.raiseSelectedChange();\r\n    }\r\n  }\r\n\r\n  onAllCollapseExpand(): void {\r\n    this.allItem.collapsed = !this.allItem.collapsed;\r\n    this.filterItems.forEach(item => item.setCollapsedRecursive(this.allItem.collapsed));\r\n  }\r\n\r\n  onFilterTextChange(text: string): void {\r\n    this.filterText = text;\r\n    this.filterChange.emit(text);\r\n    this.updateFilterItems();\r\n  }\r\n\r\n  onAllCheckedChange(): void {\r\n    const checked = this.allItem.checked;\r\n    this.filterItems.forEach(item => {\r\n      item.setCheckedRecursive(checked);\r\n      if (item instanceof FilterTreeviewItem) {\r\n        item.updateRefChecked();\r\n      }\r\n    });\r\n\r\n    this.raiseSelectedChange();\r\n  }\r\n\r\n  onItemCheckedChange(item: TreeviewItem, checked: boolean): void {\r\n    if (item instanceof FilterTreeviewItem) {\r\n      item.updateRefChecked();\r\n    }\r\n\r\n    this.updateCheckedOfAll();\r\n    this.raiseSelectedChange();\r\n  }\r\n\r\n  raiseSelectedChange(): void {\r\n    this.generateSelection();\r\n    const values = this.eventParser.getSelectedChange(this);\r\n    setTimeout(() => {\r\n      this.selectedChange.emit(values);\r\n    });\r\n  }\r\n\r\n  private createHeaderTemplateContext(): void {\r\n    this.headerTemplateContext = {\r\n      config: this.config,\r\n      item: this.allItem,\r\n      onCheckedChange: () => this.onAllCheckedChange(),\r\n      onCollapseExpand: () => this.onAllCollapseExpand(),\r\n      onFilterTextChange: (text) => this.onFilterTextChange(text)\r\n    };\r\n  }\r\n\r\n  private generateSelection(): void {\r\n    let checkedItems: TreeviewItem[] = [];\r\n    let uncheckedItems: TreeviewItem[] = [];\r\n    if (!isNil(this.items)) {\r\n      const selection = TreeviewHelper.concatSelection(this.items, checkedItems, uncheckedItems);\r\n      checkedItems = selection.checked;\r\n      uncheckedItems = selection.unchecked;\r\n    }\r\n\r\n    this.selection = {\r\n      checkedItems,\r\n      uncheckedItems\r\n    };\r\n  }\r\n\r\n  private updateFilterItems(): void {\r\n    if (this.filterText !== '') {\r\n      const filterItems: TreeviewItem[] = [];\r\n      const filterText = this.filterText.toLowerCase();\r\n      this.items.forEach(item => {\r\n        const newItem = this.filterItem(item, filterText);\r\n        if (!isNil(newItem)) {\r\n          filterItems.push(newItem);\r\n        }\r\n      });\r\n      this.filterItems = filterItems;\r\n    } else {\r\n      this.filterItems = this.items;\r\n    }\r\n\r\n    this.updateCheckedOfAll();\r\n  }\r\n\r\n  private filterItem(item: TreeviewItem, filterText: string): TreeviewItem {\r\n    const isMatch = includes(item.text.toLowerCase(), filterText);\r\n    if (isMatch) {\r\n      return item;\r\n    } else {\r\n      if (!isNil(item.children)) {\r\n        const children: TreeviewItem[] = [];\r\n        item.children.forEach(child => {\r\n          const newChild = this.filterItem(child, filterText);\r\n          if (!isNil(newChild)) {\r\n            children.push(newChild);\r\n          }\r\n        });\r\n        if (children.length > 0) {\r\n          const newItem = new FilterTreeviewItem(item);\r\n          newItem.collapsed = false;\r\n          newItem.children = children;\r\n          return newItem;\r\n        }\r\n      }\r\n    }\r\n\r\n    return undefined;\r\n  }\r\n\r\n  private updateCheckedOfAll(): void {\r\n    let itemChecked: boolean = null;\r\n    for (const filterItem of this.filterItems) {\r\n      if (itemChecked === null) {\r\n        itemChecked = filterItem.checked;\r\n      } else if (itemChecked !== filterItem.checked) {\r\n        itemChecked = undefined;\r\n        break;\r\n      }\r\n    }\r\n\r\n    if (itemChecked === null) {\r\n      itemChecked = false;\r\n    }\r\n\r\n    this.allItem.checked = itemChecked;\r\n  }\r\n\r\n  private updateCollapsedOfAll(): void {\r\n    let hasItemExpanded = false;\r\n    for (const filterItem of this.filterItems) {\r\n      if (!filterItem.collapsed) {\r\n        hasItemExpanded = true;\r\n        break;\r\n      }\r\n    }\r\n\r\n    this.allItem.collapsed = !hasItemExpanded;\r\n  }\r\n}\r\n","<ng-template #defaultItemTemplate let-item=\"item\" let-onCollapseExpand=\"onCollapseExpand\"\r\n  let-onCheckedChange=\"onCheckedChange\">\r\n  <div class=\"form-inline row-item\">\r\n    <i *ngIf=\"item.children\" (click)=\"onCollapseExpand()\" aria-hidden=\"true\" [ngSwitch]=\"item.collapsed\">\r\n      <svg *ngSwitchCase=\"true\" width=\"0.8rem\" height=\"0.8rem\" viewBox=\"0 0 16 16\" class=\"bi bi-caret-right-fill\"\r\n        fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\r\n        <path\r\n          d=\"M12.14 8.753l-5.482 4.796c-.646.566-1.658.106-1.658-.753V3.204a1 1 0 0 1 1.659-.753l5.48 4.796a1 1 0 0 1 0 1.506z\" />\r\n      </svg>\r\n      <svg *ngSwitchCase=\"false\" width=\"0.8rem\" height=\"0.8rem\" viewBox=\"0 0 16 16\" class=\"bi bi-caret-down-fill\"\r\n        fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\r\n        <path\r\n          d=\"M7.247 11.14L2.451 5.658C1.885 5.013 2.345 4 3.204 4h9.592a1 1 0 0 1 .753 1.659l-4.796 5.48a1 1 0 0 1-1.506 0z\" />\r\n      </svg>\r\n    </i>\r\n    <div class=\"form-check\">\r\n      <input type=\"checkbox\" class=\"form-check-input\" [(ngModel)]=\"item.checked\" (ngModelChange)=\"onCheckedChange()\"\r\n        [disabled]=\"item.disabled\" [indeterminate]=\"item.indeterminate\" />\r\n      <label class=\"form-check-label\" (click)=\"item.checked = !item.checked; onCheckedChange()\">\r\n        {{item.text}}\r\n      </label>\r\n    </div>\r\n  </div>\r\n</ng-template>\r\n<ng-template #defaultHeaderTemplate let-config=\"config\" let-item=\"item\" let-onCollapseExpand=\"onCollapseExpand\"\r\n  let-onCheckedChange=\"onCheckedChange\" let-onFilterTextChange=\"onFilterTextChange\">\r\n  <div *ngIf=\"config.hasFilter\" class=\"row row-filter\">\r\n    <div class=\"col-12\">\r\n      <input class=\"form-control\" type=\"text\" [placeholder]=\"i18n.getFilterPlaceholder()\" [(ngModel)]=\"filterText\"\r\n        (ngModelChange)=\"onFilterTextChange($event)\" />\r\n    </div>\r\n  </div>\r\n  <div *ngIf=\"hasFilterItems\">\r\n    <div *ngIf=\"config.hasAllCheckBox || config.hasCollapseExpand\" class=\"row row-all\">\r\n      <div class=\"col-12\">\r\n        <div class=\"form-check form-check-inline\" *ngIf=\"config.hasAllCheckBox\">\r\n          <input type=\"checkbox\" class=\"form-check-input\" [(ngModel)]=\"item.checked\" (ngModelChange)=\"onCheckedChange()\"\r\n            [indeterminate]=\"item.indeterminate\" />\r\n          <label class=\"form-check-label\" (click)=\"item.checked = !item.checked; onCheckedChange()\">\r\n            {{i18n.getAllCheckboxText()}}\r\n          </label>\r\n        </div>\r\n        <label *ngIf=\"config.hasCollapseExpand\" class=\"float-right form-check-label\" (click)=\"onCollapseExpand()\">\r\n          <i [title]=\"i18n.getTooltipCollapseExpandText(item.collapsed)\" aria-hidden=\"true\" [ngSwitch]=\"item.collapsed\">\r\n            <svg *ngSwitchCase=\"true\" width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" class=\"bi bi-arrows-angle-expand\"\r\n              fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\r\n              <path fill-rule=\"evenodd\"\r\n                d=\"M1.5 10.036a.5.5 0 0 1 .5.5v3.5h3.5a.5.5 0 0 1 0 1h-4a.5.5 0 0 1-.5-.5v-4a.5.5 0 0 1 .5-.5z\" />\r\n              <path fill-rule=\"evenodd\"\r\n                d=\"M6.354 9.646a.5.5 0 0 1 0 .708l-4.5 4.5a.5.5 0 0 1-.708-.708l4.5-4.5a.5.5 0 0 1 .708 0zm8.5-8.5a.5.5 0 0 1 0 .708l-4.5 4.5a.5.5 0 0 1-.708-.708l4.5-4.5a.5.5 0 0 1 .708 0z\" />\r\n              <path fill-rule=\"evenodd\"\r\n                d=\"M10.036 1.5a.5.5 0 0 1 .5-.5h4a.5.5 0 0 1 .5.5v4a.5.5 0 1 1-1 0V2h-3.5a.5.5 0 0 1-.5-.5z\" />\r\n            </svg>\r\n            <svg *ngSwitchCase=\"false\" width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" class=\"bi bi-arrows-angle-contract\"\r\n              fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\r\n              <path fill-rule=\"evenodd\"\r\n                d=\"M9.5 2.036a.5.5 0 0 1 .5.5v3.5h3.5a.5.5 0 0 1 0 1h-4a.5.5 0 0 1-.5-.5v-4a.5.5 0 0 1 .5-.5z\" />\r\n              <path fill-rule=\"evenodd\"\r\n                d=\"M14.354 1.646a.5.5 0 0 1 0 .708l-4.5 4.5a.5.5 0 1 1-.708-.708l4.5-4.5a.5.5 0 0 1 .708 0zm-7.5 7.5a.5.5 0 0 1 0 .708l-4.5 4.5a.5.5 0 0 1-.708-.708l4.5-4.5a.5.5 0 0 1 .708 0z\" />\r\n              <path fill-rule=\"evenodd\"\r\n                d=\"M2.036 9.5a.5.5 0 0 1 .5-.5h4a.5.5 0 0 1 .5.5v4a.5.5 0 0 1-1 0V10h-3.5a.5.5 0 0 1-.5-.5z\" />\r\n            </svg>\r\n          </i>\r\n        </label>\r\n      </div>\r\n    </div>\r\n    <div *ngIf=\"config.hasDivider\" class=\"dropdown-divider\"></div>\r\n  </div>\r\n</ng-template>\r\n<div class=\"treeview-header\">\r\n  <ng-template [ngTemplateOutlet]=\"headerTemplate || defaultHeaderTemplate\"\r\n    [ngTemplateOutletContext]=\"headerTemplateContext\">\r\n  </ng-template>\r\n</div>\r\n<div [ngSwitch]=\"hasFilterItems\">\r\n  <div *ngSwitchCase=\"true\" class=\"treeview-container\" [style.max-height.px]=\"maxHeight\">\r\n    <ngx-treeview-item *ngFor=\"let item of filterItems\" [config]=\"config\" [item]=\"item\"\r\n      [template]=\"itemTemplate || defaultItemTemplate\" (checkedChange)=\"onItemCheckedChange(item, $event)\">\r\n    </ngx-treeview-item>\r\n  </div>\r\n  <div *ngSwitchCase=\"false\" class=\"treeview-text\">\r\n    {{i18n.getFilterNoItemsFoundText()}}\r\n  </div>\r\n</div>\r\n","import { Component, EventEmitter, Input, Output, ViewChild, TemplateRef } from '@angular/core';\r\nimport { TreeviewI18n } from '../../models/treeview-i18n';\r\nimport { TreeviewItem } from '../../models/treeview-item';\r\nimport { TreeviewConfig } from '../../models/treeview-config';\r\nimport { TreeviewComponent } from '../treeview/treeview.component';\r\nimport { TreeviewHeaderTemplateContext } from '../../models/treeview-header-template-context';\r\nimport { TreeviewItemTemplateContext } from '../../models/treeview-item-template-context';\r\n\r\n@Component({\r\n  selector: 'ngx-dropdown-treeview',\r\n  templateUrl: './dropdown-treeview.component.html',\r\n  styleUrls: ['./dropdown-treeview.component.scss']\r\n})\r\nexport class DropdownTreeviewComponent {\r\n  @Input() buttonClass = 'btn-outline-secondary';\r\n  @Input() headerTemplate: TemplateRef<TreeviewHeaderTemplateContext>;\r\n  @Input() itemTemplate: TemplateRef<TreeviewItemTemplateContext>;\r\n  @Input() items: TreeviewItem[];\r\n  @Input() config: TreeviewConfig;\r\n  @Output() selectedChange = new EventEmitter<any[]>(true);\r\n  @Output() filterChange = new EventEmitter<string>();\r\n  @ViewChild(TreeviewComponent, { static: false }) treeviewComponent: TreeviewComponent;\r\n  buttonLabel: string;\r\n\r\n  constructor(\r\n    public i18n: TreeviewI18n,\r\n    private defaultConfig: TreeviewConfig\r\n  ) {\r\n    this.config = this.defaultConfig;\r\n  }\r\n\r\n  onSelectedChange(values: any[]): void {\r\n    this.buttonLabel = this.i18n.getText(this.treeviewComponent.selection);\r\n    this.selectedChange.emit(values);\r\n  }\r\n\r\n  onFilterChange(text: string): void {\r\n    this.filterChange.emit(text);\r\n  }\r\n}\r\n","<div class=\"dropdown\" ngxDropdown>\r\n  <button class=\"btn\" [ngClass]=\"buttonClass\" type=\"button\" role=\"button\" ngxDropdownToggle>\r\n    {{buttonLabel}}\r\n  </button>\r\n  <div ngxDropdownMenu aria-labelledby=\"dropdownMenu\" (click)=\"$event.stopPropagation()\">\r\n    <div class=\"dropdown-container\">\r\n      <ngx-treeview [config]=\"config\" [headerTemplate]=\"headerTemplate\" [items]=\"items\" [itemTemplate]=\"itemTemplate\"\r\n        (selectedChange)=\"onSelectedChange($event)\" (filterChange)=\"onFilterChange($event)\">\r\n      </ngx-treeview>\r\n    </div>\r\n  </div>\r\n</div>\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { isNil } from 'lodash';\r\nimport { TreeviewItem } from '../models/treeview-item';\r\n\r\n@Pipe({\r\n  name: 'ngxTreeview'\r\n})\r\nexport class TreeviewPipe implements PipeTransform {\r\n  transform(objects: any[], textField: string): TreeviewItem[] {\r\n    if (isNil(objects)) {\r\n      return undefined;\r\n    }\r\n\r\n    return objects.map(object => new TreeviewItem({ text: object[textField], value: object }));\r\n  }\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { CommonModule } from '@angular/common';\r\nimport { DropdownDirective } from './directives/dropdown.directive';\r\nimport { DropdownMenuDirective } from './directives/dropdown-menu.directive';\r\nimport { DropdownToggleDirective } from './directives/dropdown-toggle.directive';\r\nimport { DropdownTreeviewComponent } from './components/dropdown-treeview/dropdown-treeview.component';\r\nimport { TreeviewComponent } from './components/treeview/treeview.component';\r\nimport { TreeviewItemComponent } from './components/treeview-item/treeview-item.component';\r\nimport { TreeviewPipe } from './pipes/treeview.pipe';\r\nimport { TreeviewI18n, DefaultTreeviewI18n } from './models/treeview-i18n';\r\nimport { TreeviewConfig } from './models/treeview-config';\r\nimport { TreeviewEventParser, DefaultTreeviewEventParser } from './helpers/treeview-event-parser';\r\n\r\n@NgModule({\r\n  imports: [\r\n    FormsModule,\r\n    CommonModule\r\n  ],\r\n  declarations: [\r\n    TreeviewComponent,\r\n    TreeviewItemComponent,\r\n    TreeviewPipe,\r\n    DropdownDirective,\r\n    DropdownMenuDirective,\r\n    DropdownToggleDirective,\r\n    DropdownTreeviewComponent\r\n  ], exports: [\r\n    TreeviewComponent,\r\n    TreeviewPipe,\r\n    DropdownTreeviewComponent\r\n  ]\r\n})\r\nexport class TreeviewModule {\r\n  static forRoot(): ModuleWithProviders<TreeviewModule> {\r\n    return {\r\n      ngModule: TreeviewModule,\r\n      providers: [\r\n        TreeviewConfig,\r\n        { provide: TreeviewI18n, useClass: DefaultTreeviewI18n },\r\n        { provide: TreeviewEventParser, useClass: DefaultTreeviewEventParser }\r\n      ]\r\n    };\r\n  }\r\n}\r\n","/*\r\n * Public API Surface of ngx-treeview\r\n */\r\n\r\nexport * from './lib/treeview.module';\r\nexport * from './lib/components/treeview/treeview.component';\r\nexport * from './lib/components/dropdown-treeview/dropdown-treeview.component';\r\nexport * from './lib/pipes/treeview.pipe';\r\nexport * from './lib/directives/dropdown-toggle.directive';\r\nexport * from './lib/directives/dropdown.directive';\r\nexport * from './lib/models/treeview-item';\r\nexport * from './lib/models/treeview-config';\r\nexport * from './lib/models/treeview-i18n';\r\nexport * from './lib/models/treeview-item-template-context';\r\nexport * from './lib/helpers/treeview-event-parser';\r\nexport * from './lib/helpers/treeview-helper';\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}